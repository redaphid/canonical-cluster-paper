{
  "doc": {
    "logo": "images/interview-icon.png",
    "title": "Written Interview",
    "miro": "https://miro.com/app/board/uXjVMeJA43k=/",
    "main": [
      {
        "title": "Identity and Authorization Technology",
        "prompts": [
          {
            "prompt": "Describe your experience with authorization systems, specifically Open Policy Agent and OAuth.",
            "answers": [
              {
                "response": "I have extensive, varied experience when it comes to authorization and authentication systems.\nI will give some brief bullet points of my experiences over time with various authorization systems, and then I will give some more detailed examples of my experience with Open Policy Agent and OAuth.\n\n* The earliest \"exotic\" auth system I encountered in my career was a strange one called [OACC](http://oaccframework.org). It is a open-source system created by a colleague, and I remember it to be something like RBAC, with some permission delegation mechanism.\n\n* Next, I worked for Unicon and used [Shiboboleth](https://www.shibboleth.net/) (a SAML-based identity provider)\n\n* After this, I began work on the open-source Internet of Things platform \"Meshblu\", and the closed source application that ran on top of it called \"Octoblu\". Octoblu was later acquired by Citrix.\n\n#### Experience with Meshblu\nMeshblu is capable of configuring and messaging hardware or software \"devices\" hardware being things like hue bulbs, or DIY Arduino projects, and software being things like web applications. My team inherited Meshblu with a [permission system](https://meshblu.readme.io/reference/whitelists) that was baked directly in to the json document that represented the configuration of the device. This system was a simple one - arrays of concrete uuids that are allowed to perform certain actions. It was only capable of dealing with concrete entities - no roles, groups, etc. My colleagues and I eventually replaced it with a [more flexible system](https://meshblu.readme.io/reference/whitelists-2-0) that is still very simple and easy to understand.\n\nIn short, it is a 2-dimensional \"permission matrix\", where the first dimension is the actions that can be taken on a device {broadcast, discover, configure, message}, and the second dimension usually has 2-3 permissions that were relevant to the action domain. Critically, we added an 'as' permission, allowed for impersonation, which makes groups possible without being baked in to the system.\n\nOn top of this, we have many microservices that exist in \"userland\" with respect to Meshblu; they services could implement different authorization systems on top of Meshblu if necessary or desired. For example, we had a microservice that translated between OAuth and our permission system.\n\nWe had many authn/authz systems of our own to do this permission translation. For example, a microcontroller may need to authenticate via MQTT, the protocol it is using to communicate with Meshblu. Often communications happened over http, and we allowed for basic auth if necessary. Since we had many protocols, I ended up having doing this translation a lot.\n\nWe had many microservices that would \"assume the identity\" of a device, and bridge the gap between Meshblu and other services, which often required the use of OAuth. In some cases, I remember having to do the \"OAuth handshake\" between 4 different oauth providers (including at least 1 of ours). It will take me a while to remember the details of this, and I'm trying not to get *too* rambly for the sake of those having to read this :)\n\n#### The \"Totally Naive Services\" cluster & Open Policy Agent experience\n\nI later designed an experimental cluster to be used in environments with potentially very complex and unknown-to-us security requirements, conceivably including governmental or military applications. The cluster would be deployed in both single-tenant, on-prem environments and multitenant cloud environments. The cluster design factored out multitenancy with respect to the services it contained; e.g. the underlying services did not have a concept of organizations, or really even users (from a security standpoint). I used Open Policy Agent to the point of absurdity when it came to this cluster design, with the expectation that we'd eventually hit a wall of impracticality after which the services inside the cluster would have to become more complex as they became more aware of their environment.\n\nThis approach to cluster development allowed us to build the cluster in parallel to the teams developing the services, and the development roadmaps of these services could be organized such that there was no wasted code if some of the more novel ideas did not work out.\n\n_aside: I wrote a wrote a Javascript poc that used OPA's ability to return a partially-solved abstract syntax tree from a policy, and then execute it using function composition with [Ramda](https://ramdajs.com/). Should you do this? No. But it was interesting!_\n\n#### Cluster design from a security standpoint\nSeeing how I now have a captive audience (dear reader), I'll use the cluster as an object lesson in how I design things when in \"Research and Development mode\", while minimizing risk during the development of production code.\nI am recalling this from memory, and recreating the diagrams, so I may be wrong about some of the details.\n"
              },
              {
                "response": "At the highest level, the cluster is divided into 3 concentric circles of trust:\n"
              },
              {
                "response": "* No trust (outside world)\n* Authentication trust (within cluster)\n* Naive (within pod)\n",
                "figure": {
                  "image": "figures/naive-service-overview.jpg",
                  "miro": "3458764548628056239"
                }
              },
              {
                "response": "The barriers between these circles were enforced by OPA.\n",
                "type": "WithFigure"
              }
            ]
          },
          {
            "prompt": "Describe your experience integrating OpenID Connect providers or using OpenID Connect libraries in your projects.",
            "answer": "answer 2"
          },
          {
            "prompt": "Describe your experience with container technologies such as Docker, LXD and Kubernetes.",
            "answer": "answer 2"
          }
        ]
      },
      {
        "title": "General Software Engineering Experience",
        "prompts": [
          {
            "prompt": "Describe your experience integrating OpenID Connect providers or using OpenID Connect libraries in your projects.",
            "answer": "answer 1"
          }
        ]
      }
    ],
    "paragraphs": null,
    "thanks_at_the_end": "I am impressed by the context you have provided me during this process.\nI know some people think it's a bad thing to do this kind of work up front - and I've heard muttering on Reddit, etc that these first set of questions are unreasonable - but contextualizing them as a quasi-first-interview makes it seem totally reasonable. In addition, I am equally impressed by the role you play when it comes to finding the right fit for applicants, even if they have applied to the wrong position. I wish other hiring processes were more like this. Anyway, just wanted to let y'all know those thoughts crossed my mind.\n-"
  }
}
